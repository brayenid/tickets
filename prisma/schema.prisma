// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Users {
  id           String         @id
  name         String
  email        String         @unique
  password     String
  address      String         @default("0")
  role         String         @default("admin")
  birth        String         @default("1970-01-01")
  avatar       String         @default("null")
  isActive     Boolean        @default(false)
  gender       String         @default("unknown")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  Transactions Transactions[]
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model Events {
  id           String         @id
  name         String
  vendor       String         @default("Kita Tiket")
  location     String
  date         String
  description  String
  isOpen       Boolean        @default(true)
  isSale       Boolean        @default(false)
  thumbnail    String         @default("null")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  EventPrices  EventPrices[]
  Transactions Transactions[]
}

model EventPrices {
  id        String   @id
  name      String
  price     Int
  event     Events   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Transactions {
  id        String    @id @default(cuid())
  orderId   String
  amount    Int
  quantity  Int
  category  String    @default("basic")
  event     Events    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String
  source    String
  user      Users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  status    String    @default("pending")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  Tickets   Tickets[]
}

model Tickets {
  id            String       @id
  transaction   Transactions @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId String
  isActive      Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
}
